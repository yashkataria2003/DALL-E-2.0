import React, { useState, useEffect } from 'react'
import { Card, FormField, Loader } from '../Components'

const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
        return data.map((post) => <Card key={post._id} {...post} />)
    }

    else {
        return (
            <h2 className="font-bold text-[#6449ff] text-xl uppercase">
                {title}
            </h2>
        )
    }
}

export const handleDelete = async (postId) => {
    try {
        // console.log("Post ID in home component : ", postId)
        const response = await fetch(`http://localhost:4000/api/v1/post/${postId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body : JSON.stringify({ _id: postId }),
        });

        const data = await response.json();
        // console.log(data);
    }

    catch (error) {
        alert(error);
    }
}

const Home = () => {
    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState(null);
    const [searchText, setSearchText] = useState('')

    const [searchedResults, setSearchedResults] = useState(null)
    const [searchTimeout, setSearchTimeout] = useState(null)

    const fetchPosts = async () => {
        setLoading(true);

        try {
            const response = await fetch('http://localhost:4000/api/v1/post', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            })

            if (response.ok) {
                const result = await response.json();
                setAllPosts(result.data.reverse());
            }
        }

        catch (error) {
            alert(error)
        }

        finally {
            setLoading(false);
        }
    }

    useEffect(() => {
        fetchPosts();
    }, [])

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout)
        setSearchText(e.target.value);

        setSearchTimeout(
            setTimeout(() => {
                const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()))
                setSearchedResults(searchResult)
            }, 500))
    }

    return (
        <section className='flex flex-col justify-start items-start gap-y-[4vh] max-w-[80vw] mx-auto py-[2vh]'>
            <div className='flex flex-col justify-start items-start gap-y-[1vh]'>
                <h1 className='font-extrabold text-[#222328] text-[1.7rem]'>The Community Showcase</h1>
                <p className='text-[#666e75] text-[0.9rem] max-w-[60vw]'>
                    Browse through a collection of imaginative and visually stunning images generated by DALL-E AI and share them with the Community
                </p>
            </div>

            <div className=''>
                <FormField
                    labelName="Search Posts"
                    type="text"
                    name="text"
                    placeholder="Search Posts"
                    value={searchText}
                    handleChange={handleSearchChange}
                />
            </div>

            <div className="w-[100%]">
                {
                    loading ? (
                        <div className="flex justify-center items-center">
                            <Loader />
                        </div>
                    ) : (
                        <>
                            {
                                searchText && (
                                    <h2 className=' font-medium text-[#666e75] text-xl '>
                                        Showing Results for <span className='text-[#222328]'>{searchText}</span>
                                    </h2>
                                )
                            }

                            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols:1 gap-[2vh]">
                                {
                                    searchText ? (
                                        <RenderCards
                                            data={searchedResults}
                                            title="No Search Result Found"
                                        />
                                    ) : (
                                        <RenderCards
                                            data={allPosts}
                                            title="No Posts Found"
                                        />
                                    )
                                }
                            </div>
                        </>
                    )
                }
            </div>
        </section>
    )
}

export default Home
